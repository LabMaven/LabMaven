<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tide.ailab.dao.DeviceDao">

    <select id="getSensorDataList" parameterType="Sensor" resultType="Sensor">
        select c.*, b.des bDes, f.des fDes, r.des rDes, e.value,
           (case when c.alarm_type = 1 then '是'
            when c.alarm_type = 0 then '否' else '' end) alarmTypeDes,
           map.coordinate 
        from  b_define b, f_define f, r_define r, c_define c
        left join 
        (select max(tmp1.input_time) input_time, tmp1.s_id, max(tmp1.value) value
         from e_data tmp1,
              (select max(input_time) input_time,s_id from e_data GROUP BY s_id) tmp2
         where tmp1.s_id=tmp2.s_id and tmp1.input_time = tmp2.input_time
         GROUP BY tmp1.s_id) e
        on e.s_id = c.s_id
        left join s_system_map map on c.s_id = map.s_id
        where left(c.s_id, 10) = r.r_id
          and r.f_id = f.f_id
          and f.b_id = b.b_id
          and s_pid is not null
          and s_pid != ''
          and c.readorwrite = 0
        <if test="rId!=null and rId!=''">and c.s_id like concat(#{rId}, '%')</if>
        <if test="cId!=null and cId!=''">and c.s_id like concat(#{cId}, '%')</if>
        <if test="sType!=null and sType!=''">and c.s_type = #{sType}</if>
        <if test="sId!=null and sId!=''">and c.s_id = #{sId}</if>
        <if test="sPid!=null and sPid!=''">and c.s_pid = #{sPid}</if>
    </select>
    
    <select id="getSensorCollect" parameterType="Sensor" resultType="Sensor">
        select c.*, b.des bDes, f.des fDes, r.r_id rId, r.des rDes,
         map.coordinate, map.s_map_id
        from  b_define b, f_define f, r_define r, c_define c
        left join s_system_map map 
        on c.s_id = map.s_id
        where left(c.s_id, 10) = r.r_id
          and r.f_id = f.f_id
          and f.b_id = b.b_id
          and (c.s_pid = c.s_id or s_pid is null or s_pid = '')
          and c.readorwrite = 0
        <if test="rId!=null and rId!=''">and c.s_id like concat(#{rId}, '%')</if>
        <if test="cId!=null and cId!=''">and c.s_id like concat(#{cId}, '%')</if>
        <if test="sType!=null and sType!=''">and c.s_type = #{sType}</if>
        <if test="sId!=null and sId!=''">and c.s_id = #{sId}</if>
        <if test="sPid!=null and sPid!=''">and c.s_pid = #{sPid}</if>
    </select>
    
    <select id="getDeviceList" parameterType="Device" resultType="Device">
        select t.*
        from e_list t
        <where>
            <if test="rId!=null and rId!=''">t.sId like concat(#{rId}, '%')</if>
            <if test="cId!=null and cId!=''">and t.sId like concat(#{cId}, '%')</if>
        </where>
    </select>
    
    <select id="getChartData" parameterType="java.util.Map" resultType="Sensor">
        select c.c_id, t.s_id, t.input_time, t.value
        from c_define c, e_data t
        where c.s_id = t.s_id
        and c.readorwrite = 0
        and t.s_id = #{sId}
        order by input_time desc
        limit #{start}, #{size}
    </select>
    
    <select id="getSubSensors" parameterType="java.lang.String" resultType="Sensor">
        select * from c_define c
        where s_pid = #{sPid} and c.readorwrite = 0
    </select>   
    
    <update id="updateSensor" parameterType="Sensor">
        update c_define
        set
        <if test="alarmType != null">alarm_type = #{alarmType},</if>
        <if test="sMax != null">s_max = #{sMax},</if>
        <if test="sMin != null">s_min = #{sMin}</if>
        where s_id = #{sId}
    </update>
    
    <insert id="insertSensorData" parameterType="Sensor">
        insert into e_data(s_id, input_time, value)
        values(#{sId}, UTC_TIME(), #{value})
    </insert>
    
    <select id="countDeviceData" parameterType="java.util.Map" resultType="java.util.Map">
        select count(1) total, 
               sum(case when e.value &gt; c.s_max or e.value &lt; c.s_min then 1 else 0 end) abnormalCount
        from c_define c
        left join 
            (select tmp1.*
             from e_data tmp1,
                  (select max(input_time) input_time,s_id from e_data GROUP BY s_id) tmp2
             where tmp1.s_id=tmp2.s_id and tmp1.input_time = tmp2.input_time
            ) e 
           on e.s_id = c.s_id
        where c.s_pid is not null
          and c.s_pid != ''
          and c.readorwrite = 0 
        <if test="qryNormal == 'true'">and c.s_type &lt; 30</if>
        <if test="qryFan == 'true'">and c.s_type &gt; 30</if>
    </select>
    
    <select id="getSensorIds" resultType="Sensor">
        select distinct s_id, c_id from c_define_bak;
    </select>
   
</mapper>
